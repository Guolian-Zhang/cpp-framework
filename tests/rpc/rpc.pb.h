// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef PROTOBUF_INCLUDED_rpc_2eproto
#define PROTOBUF_INCLUDED_rpc_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_rpc_2eproto 

namespace protobuf_rpc_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_rpc_2eproto
class RpcTestServiceRequest;
class RpcTestServiceRequestDefaultTypeInternal;
extern RpcTestServiceRequestDefaultTypeInternal _RpcTestServiceRequest_default_instance_;
class RpcTestServiceResponse;
class RpcTestServiceResponseDefaultTypeInternal;
extern RpcTestServiceResponseDefaultTypeInternal _RpcTestServiceResponse_default_instance_;
namespace google {
namespace protobuf {
template<> ::RpcTestServiceRequest* Arena::CreateMaybeMessage<::RpcTestServiceRequest>(Arena*);
template<> ::RpcTestServiceResponse* Arena::CreateMaybeMessage<::RpcTestServiceResponse>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class RpcTestServiceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RpcTestServiceRequest) */ {
 public:
  RpcTestServiceRequest();
  virtual ~RpcTestServiceRequest();

  RpcTestServiceRequest(const RpcTestServiceRequest& from);

  inline RpcTestServiceRequest& operator=(const RpcTestServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RpcTestServiceRequest(RpcTestServiceRequest&& from) noexcept
    : RpcTestServiceRequest() {
    *this = ::std::move(from);
  }

  inline RpcTestServiceRequest& operator=(RpcTestServiceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcTestServiceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcTestServiceRequest* internal_default_instance() {
    return reinterpret_cast<const RpcTestServiceRequest*>(
               &_RpcTestServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RpcTestServiceRequest* other);
  friend void swap(RpcTestServiceRequest& a, RpcTestServiceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcTestServiceRequest* New() const final {
    return CreateMaybeMessage<RpcTestServiceRequest>(NULL);
  }

  RpcTestServiceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RpcTestServiceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RpcTestServiceRequest& from);
  void MergeFrom(const RpcTestServiceRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcTestServiceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Request = 1;
  void clear_request();
  static const int kRequestFieldNumber = 1;
  const ::std::string& request() const;
  void set_request(const ::std::string& value);
  #if LANG_CXX11
  void set_request(::std::string&& value);
  #endif
  void set_request(const char* value);
  void set_request(const char* value, size_t size);
  ::std::string* mutable_request();
  ::std::string* release_request();
  void set_allocated_request(::std::string* request);

  // @@protoc_insertion_point(class_scope:RpcTestServiceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RpcTestServiceResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RpcTestServiceResponse) */ {
 public:
  RpcTestServiceResponse();
  virtual ~RpcTestServiceResponse();

  RpcTestServiceResponse(const RpcTestServiceResponse& from);

  inline RpcTestServiceResponse& operator=(const RpcTestServiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RpcTestServiceResponse(RpcTestServiceResponse&& from) noexcept
    : RpcTestServiceResponse() {
    *this = ::std::move(from);
  }

  inline RpcTestServiceResponse& operator=(RpcTestServiceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcTestServiceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcTestServiceResponse* internal_default_instance() {
    return reinterpret_cast<const RpcTestServiceResponse*>(
               &_RpcTestServiceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RpcTestServiceResponse* other);
  friend void swap(RpcTestServiceResponse& a, RpcTestServiceResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcTestServiceResponse* New() const final {
    return CreateMaybeMessage<RpcTestServiceResponse>(NULL);
  }

  RpcTestServiceResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RpcTestServiceResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RpcTestServiceResponse& from);
  void MergeFrom(const RpcTestServiceResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcTestServiceResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Err_Msg = 4;
  void clear_err_msg();
  static const int kErrMsgFieldNumber = 4;
  const ::std::string& err_msg() const;
  void set_err_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_err_msg(::std::string&& value);
  #endif
  void set_err_msg(const char* value);
  void set_err_msg(const char* value, size_t size);
  ::std::string* mutable_err_msg();
  ::std::string* release_err_msg();
  void set_allocated_err_msg(::std::string* err_msg);

  // string Result = 5;
  void clear_result();
  static const int kResultFieldNumber = 5;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  #if LANG_CXX11
  void set_result(::std::string&& value);
  #endif
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // bool Status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  bool status() const;
  void set_status(bool value);

  // int32 Code = 3;
  void clear_code();
  static const int kCodeFieldNumber = 3;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RpcTestServiceResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr err_msg_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  bool status_;
  ::google::protobuf::int32 code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rpc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RpcTestServiceRequest

// string Request = 1;
inline void RpcTestServiceRequest::clear_request() {
  request_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcTestServiceRequest::request() const {
  // @@protoc_insertion_point(field_get:RpcTestServiceRequest.Request)
  return request_.GetNoArena();
}
inline void RpcTestServiceRequest::set_request(const ::std::string& value) {
  
  request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RpcTestServiceRequest.Request)
}
#if LANG_CXX11
inline void RpcTestServiceRequest::set_request(::std::string&& value) {
  
  request_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RpcTestServiceRequest.Request)
}
#endif
inline void RpcTestServiceRequest::set_request(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RpcTestServiceRequest.Request)
}
inline void RpcTestServiceRequest::set_request(const char* value, size_t size) {
  
  request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RpcTestServiceRequest.Request)
}
inline ::std::string* RpcTestServiceRequest::mutable_request() {
  
  // @@protoc_insertion_point(field_mutable:RpcTestServiceRequest.Request)
  return request_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcTestServiceRequest::release_request() {
  // @@protoc_insertion_point(field_release:RpcTestServiceRequest.Request)
  
  return request_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcTestServiceRequest::set_allocated_request(::std::string* request) {
  if (request != NULL) {
    
  } else {
    
  }
  request_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request);
  // @@protoc_insertion_point(field_set_allocated:RpcTestServiceRequest.Request)
}

// -------------------------------------------------------------------

// RpcTestServiceResponse

// bool Status = 2;
inline void RpcTestServiceResponse::clear_status() {
  status_ = false;
}
inline bool RpcTestServiceResponse::status() const {
  // @@protoc_insertion_point(field_get:RpcTestServiceResponse.Status)
  return status_;
}
inline void RpcTestServiceResponse::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:RpcTestServiceResponse.Status)
}

// int32 Code = 3;
inline void RpcTestServiceResponse::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 RpcTestServiceResponse::code() const {
  // @@protoc_insertion_point(field_get:RpcTestServiceResponse.Code)
  return code_;
}
inline void RpcTestServiceResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:RpcTestServiceResponse.Code)
}

// string Err_Msg = 4;
inline void RpcTestServiceResponse::clear_err_msg() {
  err_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcTestServiceResponse::err_msg() const {
  // @@protoc_insertion_point(field_get:RpcTestServiceResponse.Err_Msg)
  return err_msg_.GetNoArena();
}
inline void RpcTestServiceResponse::set_err_msg(const ::std::string& value) {
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RpcTestServiceResponse.Err_Msg)
}
#if LANG_CXX11
inline void RpcTestServiceResponse::set_err_msg(::std::string&& value) {
  
  err_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RpcTestServiceResponse.Err_Msg)
}
#endif
inline void RpcTestServiceResponse::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RpcTestServiceResponse.Err_Msg)
}
inline void RpcTestServiceResponse::set_err_msg(const char* value, size_t size) {
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RpcTestServiceResponse.Err_Msg)
}
inline ::std::string* RpcTestServiceResponse::mutable_err_msg() {
  
  // @@protoc_insertion_point(field_mutable:RpcTestServiceResponse.Err_Msg)
  return err_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcTestServiceResponse::release_err_msg() {
  // @@protoc_insertion_point(field_release:RpcTestServiceResponse.Err_Msg)
  
  return err_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcTestServiceResponse::set_allocated_err_msg(::std::string* err_msg) {
  if (err_msg != NULL) {
    
  } else {
    
  }
  err_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err_msg);
  // @@protoc_insertion_point(field_set_allocated:RpcTestServiceResponse.Err_Msg)
}

// string Result = 5;
inline void RpcTestServiceResponse::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcTestServiceResponse::result() const {
  // @@protoc_insertion_point(field_get:RpcTestServiceResponse.Result)
  return result_.GetNoArena();
}
inline void RpcTestServiceResponse::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RpcTestServiceResponse.Result)
}
#if LANG_CXX11
inline void RpcTestServiceResponse::set_result(::std::string&& value) {
  
  result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RpcTestServiceResponse.Result)
}
#endif
inline void RpcTestServiceResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RpcTestServiceResponse.Result)
}
inline void RpcTestServiceResponse::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RpcTestServiceResponse.Result)
}
inline ::std::string* RpcTestServiceResponse::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:RpcTestServiceResponse.Result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcTestServiceResponse::release_result() {
  // @@protoc_insertion_point(field_release:RpcTestServiceResponse.Result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcTestServiceResponse::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:RpcTestServiceResponse.Result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_rpc_2eproto
